Liskov Substitution Principle (LSP)
	- Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.
Interface Segregation Principle (ISP)
	- Clients should not be forced to depend on interfaces they do not use
Dependency Inversion Principle (DIP)
	-  This principle encourages decoupling by making higher-level classes depend on interfaces or abstract classes rather than concrete classes. It helps reduce tight coupling between classes, making code more flexible and easier to maintain.

Java 8
- lambda
- functional 
- streams
- default method in interfaces
- completableFuture
- date & time are immutable
	- timezone
	- new package
	- more methods & subtracting nad adding
	
JAVA 9
- List.of("a","ab") -> immutableList
- module creation
- private method in interfaces

JAVA 10
- List.copyOf(list) -> immutableList
- var -> local-Variable Type Inference

JAVA 11
- Local-Variable Syntax for Lambda Parameters
	- (var x, var y) -> x + y   //new
	- string new functions
		" ".isBlank();          // true
		" Java 11 ".strip();    // "Java 11" (trims Unicode)
		"test".repeat(3);       // "testtesttest"

JAVA 17
- Sealed Classes => This helps in restricting the sub-classing of a class, ensuring that only specific, predefined classes can extend or implement it, making the code more maintainable and secure.
	public sealed class Shape permits Circle, Square {}
- Pattern Matching switch
	return switch (shape) {
        case Triangle t && (t.getNumberOfSides() != 3) -> "This is a weird triangle";
        case Circle c && (c.getNumberOfSides() != 0) -> "This is a weird circle";
        default -> "Just a normal shape";
    };

JAVA 21
- Virtual thread
	- more light weight & can create millions of virtual threads
	- cost efficient
	- managed by JVM and not by platform
- Pattern matching in switch improvements
- `sequenced collection [uniformity] `- 
	- [getFirst(), getLast(), removeFirst(), removeLast(), reversed()] [List]
	- sequencedMap firstEntry(), lastEntry(), putFirst(), putLast() - Map
- Scoped Values
	- Scoped values enable you to share data safely across different threads without the need for synchronization mechanisms like locks. This can be useful for applications that need to pass context (e.g., user data, session information) between different parts of a program running in different threads.

- String Template
	String name = "Java";
String version = "21";
String message = String templated: "The language is {name}, version {version}";
System.out.println(message);

## JAVA 23
- can add statements before super() call;

## JAVA 24
- Permanently disable of java security manager
- window 32 bit end of support
- switch 
	case int i when i>100 && i<500 -> "success"

























